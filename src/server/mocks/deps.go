// Code generated by MockGen. DO NOT EDIT.
// Source: ./src/server/deps.go

// Package mocks is a generated GoMock package.
package mocks

import (
	io "io"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	echo "github.com/labstack/echo/v4"
	db "github.com/letsblockit/letsblockit/src/db"
	filters "github.com/letsblockit/letsblockit/src/filters"
	news "github.com/letsblockit/letsblockit/src/news"
	pages "github.com/letsblockit/letsblockit/src/pages"
)

// MockPageRenderer is a mock of PageRenderer interface.
type MockPageRenderer struct {
	ctrl     *gomock.Controller
	recorder *MockPageRendererMockRecorder
}

// MockPageRendererMockRecorder is the mock recorder for MockPageRenderer.
type MockPageRendererMockRecorder struct {
	mock *MockPageRenderer
}

// NewMockPageRenderer creates a new mock instance.
func NewMockPageRenderer(ctrl *gomock.Controller) *MockPageRenderer {
	mock := &MockPageRenderer{ctrl: ctrl}
	mock.recorder = &MockPageRendererMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPageRenderer) EXPECT() *MockPageRendererMockRecorder {
	return m.recorder
}

// RegisterHelpers mocks base method.
func (m *MockPageRenderer) RegisterHelpers(helpers map[string]interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterHelpers", helpers)
}

// RegisterHelpers indicates an expected call of RegisterHelpers.
func (mr *MockPageRendererMockRecorder) RegisterHelpers(helpers interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterHelpers", reflect.TypeOf((*MockPageRenderer)(nil).RegisterHelpers), helpers)
}

// Render mocks base method.
func (m *MockPageRenderer) Render(c echo.Context, name string, data *pages.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Render", c, name, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Render indicates an expected call of Render.
func (mr *MockPageRendererMockRecorder) Render(c, name, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Render", reflect.TypeOf((*MockPageRenderer)(nil).Render), c, name, data)
}

// RenderWithSidebar mocks base method.
func (m *MockPageRenderer) RenderWithSidebar(c echo.Context, name, sidebar string, data *pages.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenderWithSidebar", c, name, sidebar, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// RenderWithSidebar indicates an expected call of RenderWithSidebar.
func (mr *MockPageRendererMockRecorder) RenderWithSidebar(c, name, sidebar, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenderWithSidebar", reflect.TypeOf((*MockPageRenderer)(nil).RenderWithSidebar), c, name, sidebar, data)
}

// MockFilterRepository is a mock of FilterRepository interface.
type MockFilterRepository struct {
	ctrl     *gomock.Controller
	recorder *MockFilterRepositoryMockRecorder
}

// MockFilterRepositoryMockRecorder is the mock recorder for MockFilterRepository.
type MockFilterRepositoryMockRecorder struct {
	mock *MockFilterRepository
}

// NewMockFilterRepository creates a new mock instance.
func NewMockFilterRepository(ctrl *gomock.Controller) *MockFilterRepository {
	mock := &MockFilterRepository{ctrl: ctrl}
	mock.recorder = &MockFilterRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFilterRepository) EXPECT() *MockFilterRepositoryMockRecorder {
	return m.recorder
}

// GetFilter mocks base method.
func (m *MockFilterRepository) GetFilter(name string) (*filters.Filter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilter", name)
	ret0, _ := ret[0].(*filters.Filter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilter indicates an expected call of GetFilter.
func (mr *MockFilterRepositoryMockRecorder) GetFilter(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilter", reflect.TypeOf((*MockFilterRepository)(nil).GetFilter), name)
}

// GetFilters mocks base method.
func (m *MockFilterRepository) GetFilters() []*filters.Filter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilters")
	ret0, _ := ret[0].([]*filters.Filter)
	return ret0
}

// GetFilters indicates an expected call of GetFilters.
func (mr *MockFilterRepositoryMockRecorder) GetFilters() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilters", reflect.TypeOf((*MockFilterRepository)(nil).GetFilters))
}

// GetTags mocks base method.
func (m *MockFilterRepository) GetTags() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTags")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetTags indicates an expected call of GetTags.
func (mr *MockFilterRepositoryMockRecorder) GetTags() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTags", reflect.TypeOf((*MockFilterRepository)(nil).GetTags))
}

// Render mocks base method.
func (m *MockFilterRepository) Render(w io.Writer, name string, data map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Render", w, name, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Render indicates an expected call of Render.
func (mr *MockFilterRepositoryMockRecorder) Render(w, name, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Render", reflect.TypeOf((*MockFilterRepository)(nil).Render), w, name, data)
}

// MockReleaseClient is a mock of ReleaseClient interface.
type MockReleaseClient struct {
	ctrl     *gomock.Controller
	recorder *MockReleaseClientMockRecorder
}

// MockReleaseClientMockRecorder is the mock recorder for MockReleaseClient.
type MockReleaseClientMockRecorder struct {
	mock *MockReleaseClient
}

// NewMockReleaseClient creates a new mock instance.
func NewMockReleaseClient(ctrl *gomock.Controller) *MockReleaseClient {
	mock := &MockReleaseClient{ctrl: ctrl}
	mock.recorder = &MockReleaseClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReleaseClient) EXPECT() *MockReleaseClientMockRecorder {
	return m.recorder
}

// GetLatestAt mocks base method.
func (m *MockReleaseClient) GetLatestAt() (time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestAt")
	ret0, _ := ret[0].(time.Time)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestAt indicates an expected call of GetLatestAt.
func (mr *MockReleaseClientMockRecorder) GetLatestAt() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestAt", reflect.TypeOf((*MockReleaseClient)(nil).GetLatestAt))
}

// GetReleases mocks base method.
func (m *MockReleaseClient) GetReleases() ([]*news.Release, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReleases")
	ret0, _ := ret[0].([]*news.Release)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReleases indicates an expected call of GetReleases.
func (mr *MockReleaseClientMockRecorder) GetReleases() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReleases", reflect.TypeOf((*MockReleaseClient)(nil).GetReleases))
}

// MockUserPreferenceManager is a mock of UserPreferenceManager interface.
type MockUserPreferenceManager struct {
	ctrl     *gomock.Controller
	recorder *MockUserPreferenceManagerMockRecorder
}

// MockUserPreferenceManagerMockRecorder is the mock recorder for MockUserPreferenceManager.
type MockUserPreferenceManagerMockRecorder struct {
	mock *MockUserPreferenceManager
}

// NewMockUserPreferenceManager creates a new mock instance.
func NewMockUserPreferenceManager(ctrl *gomock.Controller) *MockUserPreferenceManager {
	mock := &MockUserPreferenceManager{ctrl: ctrl}
	mock.recorder = &MockUserPreferenceManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserPreferenceManager) EXPECT() *MockUserPreferenceManagerMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockUserPreferenceManager) Get(c echo.Context, user string) (*db.UserPreference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", c, user)
	ret0, _ := ret[0].(*db.UserPreference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockUserPreferenceManagerMockRecorder) Get(c, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockUserPreferenceManager)(nil).Get), c, user)
}

// UpdateNewsCursor mocks base method.
func (m *MockUserPreferenceManager) UpdateNewsCursor(c echo.Context, user string, at time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNewsCursor", c, user, at)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateNewsCursor indicates an expected call of UpdateNewsCursor.
func (mr *MockUserPreferenceManagerMockRecorder) UpdateNewsCursor(c, user, at interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNewsCursor", reflect.TypeOf((*MockUserPreferenceManager)(nil).UpdateNewsCursor), c, user, at)
}
