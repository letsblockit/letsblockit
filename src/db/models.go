// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0

package db

import (
	"database/sql/driver"
	"fmt"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

type ColorMode string

const (
	ColorModeAuto  ColorMode = "auto"
	ColorModeDark  ColorMode = "dark"
	ColorModeLight ColorMode = "light"
)

func (e *ColorMode) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ColorMode(s)
	case string:
		*e = ColorMode(s)
	default:
		return fmt.Errorf("unsupported scan type for ColorMode: %T", src)
	}
	return nil
}

type NullColorMode struct {
	ColorMode ColorMode
	Valid     bool // Valid is true if ColorMode is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullColorMode) Scan(value interface{}) error {
	if value == nil {
		ns.ColorMode, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ColorMode.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullColorMode) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ColorMode), nil
}

type BannedUser struct {
	ID         int32
	UserID     string
	CreatedAt  pgtype.Timestamptz
	Reason     string
	LiftedAt   pgtype.Timestamptz
	LiftReason pgtype.Text
}

type FilterInstance struct {
	ID           int32
	UserID       string
	ListID       int32
	TemplateName string
	Params       []byte
	CreatedAt    pgtype.Timestamptz
	UpdatedAt    pgtype.Timestamptz
	TestMode     bool
}

type FilterList struct {
	ID           int32
	UserID       string
	Token        uuid.UUID
	CreatedAt    pgtype.Timestamptz
	DownloadedAt pgtype.Timestamptz
}

type UserPreference struct {
	UserID       string
	NewsCursor   pgtype.Timestamptz
	BetaFeatures bool
	ColorMode    ColorMode
}
